package main
import "fmt"

func addNumbers(a uint32,b uint32) uint32{
    return (a+b)
}

func main() {
    var num1, num2, res uint32
    fmt.Scanf("%v\n%v", &num1,&num2)
    res = addNumbers(num1, num2)
    fmt.Println(res)
}
Your old code in python3 has been preserved below.

'''
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

                2
           1 /   \ 1
            /     \
          1       3
                 /          
                / 1
               4
               
               

weights = [[2,1,1],[2,3,1],[3,4,1]]
nodes = 4
start = 2

result = 2

'''



times = [[2,1,1],[2,3,1],[3,4,1]]
nodes = 4
start = 2

def network_signal(times, n, k):
    
    # Implement code here
    pass

print(network_signal(times, nodes, start))